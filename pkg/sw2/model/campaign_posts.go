// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CampaignPosts campaign posts
//
// swagger:model campaign_posts
type CampaignPosts struct {

	// campaign id
	// Required: true
	CampaignID *ID `json:"campaign_id"`

	// day
	// Required: true
	Day *DayDate `json:"day"`

	// campaign posts additional properties
	CampaignPostsAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *CampaignPosts) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// campaign id
		// Required: true
		CampaignID *ID `json:"campaign_id"`

		// day
		// Required: true
		Day *DayDate `json:"day"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv CampaignPosts

	rcv.CampaignID = stage1.CampaignID
	rcv.Day = stage1.Day
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "campaign_id")
	delete(stage2, "day")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.CampaignPostsAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m CampaignPosts) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// campaign id
		// Required: true
		CampaignID *ID `json:"campaign_id"`

		// day
		// Required: true
		Day *DayDate `json:"day"`
	}

	stage1.CampaignID = m.CampaignID
	stage1.Day = m.Day

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.CampaignPostsAdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.CampaignPostsAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this campaign posts
func (m *CampaignPosts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignPosts) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaign_id", "body", m.CampaignID); err != nil {
		return err
	}

	if err := validate.Required("campaign_id", "body", m.CampaignID); err != nil {
		return err
	}

	if m.CampaignID != nil {
		if err := m.CampaignID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campaign_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("campaign_id")
			}
			return err
		}
	}

	return nil
}

func (m *CampaignPosts) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	if m.Day != nil {
		if err := m.Day.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("day")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("day")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this campaign posts based on the context it is used
func (m *CampaignPosts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCampaignID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CampaignPosts) contextValidateCampaignID(ctx context.Context, formats strfmt.Registry) error {

	if m.CampaignID != nil {
		if err := m.CampaignID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campaign_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("campaign_id")
			}
			return err
		}
	}

	return nil
}

func (m *CampaignPosts) contextValidateDay(ctx context.Context, formats strfmt.Registry) error {

	if m.Day != nil {
		if err := m.Day.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("day")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("day")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CampaignPosts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CampaignPosts) UnmarshalBinary(b []byte) error {
	var res CampaignPosts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
