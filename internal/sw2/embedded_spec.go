// Code generated by go-swagger; DO NOT EDIT.

package sw2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Some description of your amazing service",
    "title": "stats",
    "version": "1.9.9"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1/accounts",
  "paths": {
    "/": {
      "post": {
        "description": "Starts loading account ad and campaign statistic or raise account loading task in line \n Response for new account is 201 CREATED \n Response for raising in line is 200 OK",
        "produces": [
          "application/json"
        ],
        "operationId": "addAccUpdater",
        "parameters": [
          {
            "$ref": "#/parameters/request_id"
          },
          {
            "$ref": "#/parameters/account_id_query"
          },
          {
            "$ref": "#/parameters/user_id"
          },
          {
            "$ref": "#/parameters/client_id"
          },
          {
            "$ref": "#/parameters/force"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "201": {
            "$ref": "#/responses/Created"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/{account_id}": {
      "delete": {
        "description": "Delete account from loading queue and stop regularly updates.\n Note: in --loader-acc-list-upd-timeout (default 600s) account list will be updated from cabinets service, if account presented in service, new update will be started.",
        "operationId": "delAccUpdater",
        "parameters": [
          {
            "$ref": "#/parameters/request_id"
          },
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/user_id"
          },
          {
            "$ref": "#/parameters/client_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/{account_id}/ads": {
      "get": {
        "description": "Gives array of stats for set time period. If updatedSince set, then reutrns only stats updated after set time",
        "produces": [
          "application/json"
        ],
        "operationId": "getAdsStats",
        "parameters": [
          {
            "$ref": "#/parameters/request_id"
          },
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/client_id"
          },
          {
            "$ref": "#/parameters/user_id"
          },
          {
            "$ref": "#/parameters/ad_ids"
          },
          {
            "$ref": "#/parameters/updated_since"
          },
          {
            "$ref": "#/parameters/date_from"
          },
          {
            "$ref": "#/parameters/date_to"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Ads"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/{account_id}/campaigns": {
      "get": {
        "description": "Gives array of stats for set time period. If updatedSince set, then reutrns only stats updated after set time",
        "produces": [
          "application/json"
        ],
        "operationId": "getCampaignsStats",
        "parameters": [
          {
            "$ref": "#/parameters/request_id"
          },
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "$ref": "#/parameters/client_id"
          },
          {
            "$ref": "#/parameters/user_id"
          },
          {
            "$ref": "#/parameters/campaign_ids"
          },
          {
            "$ref": "#/parameters/updated_since"
          },
          {
            "$ref": "#/parameters/date_from"
          },
          {
            "$ref": "#/parameters/date_to"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Campaigns"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    }
  },
  "definitions": {
    "ad_posts": {
      "type": "object",
      "required": [
        "ad_id",
        "day"
      ],
      "properties": {
        "ad_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day_date"
        }
      },
      "additionalProperties": true
    },
    "ad_posts_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ad_posts"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "ad_stats": {
      "type": "object",
      "required": [
        "ad_id",
        "day"
      ],
      "properties": {
        "ad_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day"
        }
      },
      "additionalProperties": true
    },
    "ad_stats_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ad_stats"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "campaign_posts": {
      "type": "object",
      "required": [
        "campaign_id",
        "day"
      ],
      "properties": {
        "campaign_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day_date"
        }
      },
      "additionalProperties": true
    },
    "campaign_posts_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/campaign_posts"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "campaign_stats": {
      "type": "object",
      "required": [
        "campaign_id",
        "day"
      ],
      "properties": {
        "campaign_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day"
        }
      },
      "additionalProperties": true
    },
    "campaign_stats_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/campaign_stats"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "day": {
      "description": "Statistics day timestamp in unix time",
      "type": "integer",
      "format": "int64"
    },
    "day_date": {
      "description": "Statistics day date in YYYY-MM-DD format",
      "type": "string"
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/error"
        }
      }
    },
    "id": {
      "description": "Object ID",
      "type": "integer",
      "format": "int64"
    },
    "next": {
      "description": "link to next page of results by main request",
      "type": "string"
    },
    "ok": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "default": "OK"
        }
      }
    },
    "principal": {
      "type": "object",
      "properties": {
        "account_id": {
          "description": "account id",
          "type": "integer",
          "format": "int64"
        },
        "token": {
          "description": "system token",
          "type": "string"
        }
      }
    },
    "total": {
      "description": "Total records finded by request",
      "type": "integer",
      "format": "int64"
    }
  },
  "parameters": {
    "account_id": {
      "type": "integer",
      "format": "int64",
      "name": "account_id",
      "in": "path",
      "required": true
    },
    "account_id_query": {
      "type": "integer",
      "format": "int64",
      "name": "account_id",
      "in": "query",
      "required": true
    },
    "ad_ids": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "name": "ad_ids",
      "in": "query"
    },
    "campaign_ids": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "name": "campaign_ids",
      "in": "query"
    },
    "client_id": {
      "type": "integer",
      "format": "int64",
      "name": "client_id",
      "in": "query"
    },
    "date_from": {
      "type": "integer",
      "format": "int64",
      "description": "If presented, return only statistics starting from presented date in Unixtime",
      "name": "date_from",
      "in": "query"
    },
    "date_to": {
      "type": "integer",
      "format": "int64",
      "description": "If presented, return only statistics up to presented date in Unixtime",
      "name": "date_to",
      "in": "query"
    },
    "fields": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Enumeration wanted parameters of requested object",
      "name": "fields",
      "in": "query"
    },
    "force": {
      "type": "boolean",
      "description": "if set, account will be updated without cache from beginning of time",
      "name": "force",
      "in": "query"
    },
    "request_id": {
      "minLength": 30,
      "type": "string",
      "name": "X-RequestID",
      "in": "header",
      "required": true
    },
    "updated_since": {
      "type": "integer",
      "format": "int64",
      "description": "If presented, return only statistics up to presented date in Unixtime",
      "name": "updated_since",
      "in": "query"
    },
    "user_id": {
      "type": "integer",
      "format": "int64",
      "name": "user_id",
      "in": "query",
      "required": true
    }
  },
  "responses": {
    "Ads": {
      "description": "pages of Ad",
      "schema": {
        "type": "object",
        "properties": {
          "ads": {
            "$ref": "#/definitions/ad_stats_page"
          }
        }
      }
    },
    "BadRequest": {
      "description": "bad request 400",
      "schema": {
        "$ref": "#/definitions/errorResponse"
      }
    },
    "Campaigns": {
      "description": "pages of Campaign",
      "schema": {
        "type": "object",
        "properties": {
          "campaigns": {
            "$ref": "#/definitions/campaign_stats_page"
          }
        }
      }
    },
    "Created": {
      "description": "created 201",
      "schema": {
        "$ref": "#/definitions/ok"
      }
    },
    "InternalError": {
      "description": "internal server error 500",
      "schema": {
        "$ref": "#/definitions/errorResponse"
      }
    },
    "OK": {
      "description": "success 200",
      "schema": {
        "$ref": "#/definitions/ok"
      }
    },
    "Unauthorized": {
      "description": "unauthorized 400",
      "schema": {
        "$ref": "#/definitions/errorResponse"
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-System-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Some description of your amazing service",
    "title": "stats",
    "version": "1.9.9"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1/accounts",
  "paths": {
    "/": {
      "post": {
        "description": "Starts loading account ad and campaign statistic or raise account loading task in line \n Response for new account is 201 CREATED \n Response for raising in line is 200 OK",
        "produces": [
          "application/json"
        ],
        "operationId": "addAccUpdater",
        "parameters": [
          {
            "minLength": 30,
            "type": "string",
            "name": "X-RequestID",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "account_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "user_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "client_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "if set, account will be updated without cache from beginning of time",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success 200",
            "schema": {
              "$ref": "#/definitions/ok"
            }
          },
          "201": {
            "description": "created 201",
            "schema": {
              "$ref": "#/definitions/ok"
            }
          },
          "400": {
            "description": "bad request 400",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "internal server error 500",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/{account_id}": {
      "delete": {
        "description": "Delete account from loading queue and stop regularly updates.\n Note: in --loader-acc-list-upd-timeout (default 600s) account list will be updated from cabinets service, if account presented in service, new update will be started.",
        "operationId": "delAccUpdater",
        "parameters": [
          {
            "minLength": 30,
            "type": "string",
            "name": "X-RequestID",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "user_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "client_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success 200",
            "schema": {
              "$ref": "#/definitions/ok"
            }
          },
          "400": {
            "description": "bad request 400",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "internal server error 500",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/{account_id}/ads": {
      "get": {
        "description": "Gives array of stats for set time period. If updatedSince set, then reutrns only stats updated after set time",
        "produces": [
          "application/json"
        ],
        "operationId": "getAdsStats",
        "parameters": [
          {
            "minLength": 30,
            "type": "string",
            "name": "X-RequestID",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "client_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "user_id",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "name": "ad_ids",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If presented, return only statistics up to presented date in Unixtime",
            "name": "updated_since",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If presented, return only statistics starting from presented date in Unixtime",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If presented, return only statistics up to presented date in Unixtime",
            "name": "date_to",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Enumeration wanted parameters of requested object",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "pages of Ad",
            "schema": {
              "type": "object",
              "properties": {
                "ads": {
                  "$ref": "#/definitions/ad_stats_page"
                }
              }
            }
          },
          "400": {
            "description": "bad request 400",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "unauthorized 400",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "internal server error 500",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/{account_id}/campaigns": {
      "get": {
        "description": "Gives array of stats for set time period. If updatedSince set, then reutrns only stats updated after set time",
        "produces": [
          "application/json"
        ],
        "operationId": "getCampaignsStats",
        "parameters": [
          {
            "minLength": 30,
            "type": "string",
            "name": "X-RequestID",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "client_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "user_id",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "name": "campaign_ids",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If presented, return only statistics up to presented date in Unixtime",
            "name": "updated_since",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If presented, return only statistics starting from presented date in Unixtime",
            "name": "date_from",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If presented, return only statistics up to presented date in Unixtime",
            "name": "date_to",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Enumeration wanted parameters of requested object",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "pages of Campaign",
            "schema": {
              "type": "object",
              "properties": {
                "campaigns": {
                  "$ref": "#/definitions/campaign_stats_page"
                }
              }
            }
          },
          "400": {
            "description": "bad request 400",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "unauthorized 400",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "internal server error 500",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ad_posts": {
      "type": "object",
      "required": [
        "ad_id",
        "day"
      ],
      "properties": {
        "ad_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day_date"
        }
      },
      "additionalProperties": true
    },
    "ad_posts_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ad_posts"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "ad_stats": {
      "type": "object",
      "required": [
        "ad_id",
        "day"
      ],
      "properties": {
        "ad_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day"
        }
      },
      "additionalProperties": true
    },
    "ad_stats_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ad_stats"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "campaign_posts": {
      "type": "object",
      "required": [
        "campaign_id",
        "day"
      ],
      "properties": {
        "campaign_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day_date"
        }
      },
      "additionalProperties": true
    },
    "campaign_posts_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/campaign_posts"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "campaign_stats": {
      "type": "object",
      "required": [
        "campaign_id",
        "day"
      ],
      "properties": {
        "campaign_id": {
          "$ref": "#/definitions/id"
        },
        "day": {
          "$ref": "#/definitions/day"
        }
      },
      "additionalProperties": true
    },
    "campaign_stats_page": {
      "type": "object",
      "required": [
        "items",
        "total"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/campaign_stats"
          }
        },
        "next": {
          "$ref": "#/definitions/next"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      }
    },
    "day": {
      "description": "Statistics day timestamp in unix time",
      "type": "integer",
      "format": "int64"
    },
    "day_date": {
      "description": "Statistics day date in YYYY-MM-DD format",
      "type": "string"
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "details": {
          "type": "object"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/error"
        }
      }
    },
    "id": {
      "description": "Object ID",
      "type": "integer",
      "format": "int64"
    },
    "next": {
      "description": "link to next page of results by main request",
      "type": "string"
    },
    "ok": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "default": "OK"
        }
      }
    },
    "principal": {
      "type": "object",
      "properties": {
        "account_id": {
          "description": "account id",
          "type": "integer",
          "format": "int64"
        },
        "token": {
          "description": "system token",
          "type": "string"
        }
      }
    },
    "total": {
      "description": "Total records finded by request",
      "type": "integer",
      "format": "int64"
    }
  },
  "parameters": {
    "account_id": {
      "type": "integer",
      "format": "int64",
      "name": "account_id",
      "in": "path",
      "required": true
    },
    "account_id_query": {
      "type": "integer",
      "format": "int64",
      "name": "account_id",
      "in": "query",
      "required": true
    },
    "ad_ids": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "name": "ad_ids",
      "in": "query"
    },
    "campaign_ids": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "name": "campaign_ids",
      "in": "query"
    },
    "client_id": {
      "type": "integer",
      "format": "int64",
      "name": "client_id",
      "in": "query"
    },
    "date_from": {
      "type": "integer",
      "format": "int64",
      "description": "If presented, return only statistics starting from presented date in Unixtime",
      "name": "date_from",
      "in": "query"
    },
    "date_to": {
      "type": "integer",
      "format": "int64",
      "description": "If presented, return only statistics up to presented date in Unixtime",
      "name": "date_to",
      "in": "query"
    },
    "fields": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Enumeration wanted parameters of requested object",
      "name": "fields",
      "in": "query"
    },
    "force": {
      "type": "boolean",
      "description": "if set, account will be updated without cache from beginning of time",
      "name": "force",
      "in": "query"
    },
    "request_id": {
      "minLength": 30,
      "type": "string",
      "name": "X-RequestID",
      "in": "header",
      "required": true
    },
    "updated_since": {
      "type": "integer",
      "format": "int64",
      "description": "If presented, return only statistics up to presented date in Unixtime",
      "name": "updated_since",
      "in": "query"
    },
    "user_id": {
      "type": "integer",
      "format": "int64",
      "name": "user_id",
      "in": "query",
      "required": true
    }
  },
  "responses": {
    "Ads": {
      "description": "pages of Ad",
      "schema": {
        "type": "object",
        "properties": {
          "ads": {
            "$ref": "#/definitions/ad_stats_page"
          }
        }
      }
    },
    "BadRequest": {
      "description": "bad request 400",
      "schema": {
        "$ref": "#/definitions/errorResponse"
      }
    },
    "Campaigns": {
      "description": "pages of Campaign",
      "schema": {
        "type": "object",
        "properties": {
          "campaigns": {
            "$ref": "#/definitions/campaign_stats_page"
          }
        }
      }
    },
    "Created": {
      "description": "created 201",
      "schema": {
        "$ref": "#/definitions/ok"
      }
    },
    "InternalError": {
      "description": "internal server error 500",
      "schema": {
        "$ref": "#/definitions/errorResponse"
      }
    },
    "OK": {
      "description": "success 200",
      "schema": {
        "$ref": "#/definitions/ok"
      }
    },
    "Unauthorized": {
      "description": "unauthorized 400",
      "schema": {
        "$ref": "#/definitions/errorResponse"
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-System-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}`))
}
