// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/grbit/swagger-example/pkg/sw2/model"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAdsStatsHandlerFunc turns a function with the right signature into a get ads stats handler
type GetAdsStatsHandlerFunc func(GetAdsStatsParams, *model.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAdsStatsHandlerFunc) Handle(params GetAdsStatsParams, principal *model.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetAdsStatsHandler interface for that can handle valid get ads stats params
type GetAdsStatsHandler interface {
	Handle(GetAdsStatsParams, *model.Principal) middleware.Responder
}

// NewGetAdsStats creates a new http.Handler for the get ads stats operation
func NewGetAdsStats(ctx *middleware.Context, handler GetAdsStatsHandler) *GetAdsStats {
	return &GetAdsStats{Context: ctx, Handler: handler}
}

/*
	GetAdsStats swagger:route GET /{account_id}/ads getAdsStats

Gives array of stats for set time period. If updatedSince set, then reutrns only stats updated after set time
*/
type GetAdsStats struct {
	Context *middleware.Context
	Handler GetAdsStatsHandler
}

func (o *GetAdsStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAdsStatsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *model.Principal
	if uprinc != nil {
		principal = uprinc.(*model.Principal) // this is really a model.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAdsStatsOKBody get ads stats o k body
//
// swagger:model GetAdsStatsOKBody
type GetAdsStatsOKBody struct {

	// ads
	Ads *model.AdStatsPage `json:"ads,omitempty"`
}

// Validate validates this get ads stats o k body
func (o *GetAdsStatsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdsStatsOKBody) validateAds(formats strfmt.Registry) error {
	if swag.IsZero(o.Ads) { // not required
		return nil
	}

	if o.Ads != nil {
		if err := o.Ads.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdsStatsOK" + "." + "ads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdsStatsOK" + "." + "ads")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get ads stats o k body based on the context it is used
func (o *GetAdsStatsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdsStatsOKBody) contextValidateAds(ctx context.Context, formats strfmt.Registry) error {

	if o.Ads != nil {
		if err := o.Ads.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdsStatsOK" + "." + "ads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdsStatsOK" + "." + "ads")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAdsStatsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdsStatsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAdsStatsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
