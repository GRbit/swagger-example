// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/swag"
)

// GetCampaignsStatsURL generates an URL for the get campaigns stats operation
type GetCampaignsStatsURL struct {
	AccountID int64

	CampaignIds  []int64
	ClientID     *int64
	DateFrom     *int64
	DateTo       *int64
	Fields       []string
	UpdatedSince *int64
	UserID       int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetCampaignsStatsURL) WithBasePath(bp string) *GetCampaignsStatsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetCampaignsStatsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetCampaignsStatsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/{account_id}/campaigns"

	accountID := swag.FormatInt64(o.AccountID)
	if accountID != "" {
		_path = strings.Replace(_path, "{account_id}", accountID, -1)
	} else {
		return nil, errors.New("accountId is required on GetCampaignsStatsURL")
	}

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/accounts"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var campaignIdsIR []string
	for _, campaignIdsI := range o.CampaignIds {
		campaignIdsIS := swag.FormatInt64(campaignIdsI)
		if campaignIdsIS != "" {
			campaignIdsIR = append(campaignIdsIR, campaignIdsIS)
		}
	}

	campaignIds := swag.JoinByFormat(campaignIdsIR, "")

	if len(campaignIds) > 0 {
		qsv := campaignIds[0]
		if qsv != "" {
			qs.Set("campaign_ids", qsv)
		}
	}

	var clientIDQ string
	if o.ClientID != nil {
		clientIDQ = swag.FormatInt64(*o.ClientID)
	}
	if clientIDQ != "" {
		qs.Set("client_id", clientIDQ)
	}

	var dateFromQ string
	if o.DateFrom != nil {
		dateFromQ = swag.FormatInt64(*o.DateFrom)
	}
	if dateFromQ != "" {
		qs.Set("date_from", dateFromQ)
	}

	var dateToQ string
	if o.DateTo != nil {
		dateToQ = swag.FormatInt64(*o.DateTo)
	}
	if dateToQ != "" {
		qs.Set("date_to", dateToQ)
	}

	var fieldsIR []string
	for _, fieldsI := range o.Fields {
		fieldsIS := fieldsI
		if fieldsIS != "" {
			fieldsIR = append(fieldsIR, fieldsIS)
		}
	}

	fields := swag.JoinByFormat(fieldsIR, "")

	if len(fields) > 0 {
		qsv := fields[0]
		if qsv != "" {
			qs.Set("fields", qsv)
		}
	}

	var updatedSinceQ string
	if o.UpdatedSince != nil {
		updatedSinceQ = swag.FormatInt64(*o.UpdatedSince)
	}
	if updatedSinceQ != "" {
		qs.Set("updated_since", updatedSinceQ)
	}

	userIDQ := swag.FormatInt64(o.UserID)
	if userIDQ != "" {
		qs.Set("user_id", userIDQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetCampaignsStatsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetCampaignsStatsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetCampaignsStatsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetCampaignsStatsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetCampaignsStatsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetCampaignsStatsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
