// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetAdsStatsParams creates a new GetAdsStatsParams object
//
// There are no default values defined in the spec.
func NewGetAdsStatsParams() GetAdsStatsParams {

	return GetAdsStatsParams{}
}

// GetAdsStatsParams contains all the bound params for the get ads stats operation
// typically these are obtained from a http.Request
//
// swagger:parameters getAdsStats
type GetAdsStatsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  Min Length: 30
	  In: header
	*/
	XRequestID string
	/*
	  Required: true
	  In: path
	*/
	AccountID int64
	/*
	  In: query
	*/
	AdIds []int64
	/*
	  In: query
	*/
	ClientID *int64
	/*If presented, return only statistics starting from presented date in Unixtime
	  In: query
	*/
	DateFrom *int64
	/*If presented, return only statistics up to presented date in Unixtime
	  In: query
	*/
	DateTo *int64
	/*Enumeration wanted parameters of requested object
	  In: query
	*/
	Fields []string
	/*If presented, return only statistics up to presented date in Unixtime
	  In: query
	*/
	UpdatedSince *int64
	/*
	  Required: true
	  In: query
	*/
	UserID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAdsStatsParams() beforehand.
func (o *GetAdsStatsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-RequestID")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rAccountID, rhkAccountID, _ := route.Params.GetOK("account_id")
	if err := o.bindAccountID(rAccountID, rhkAccountID, route.Formats); err != nil {
		res = append(res, err)
	}

	qAdIds, qhkAdIds, _ := qs.GetOK("ad_ids")
	if err := o.bindAdIds(qAdIds, qhkAdIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qClientID, qhkClientID, _ := qs.GetOK("client_id")
	if err := o.bindClientID(qClientID, qhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateFrom, qhkDateFrom, _ := qs.GetOK("date_from")
	if err := o.bindDateFrom(qDateFrom, qhkDateFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateTo, qhkDateTo, _ := qs.GetOK("date_to")
	if err := o.bindDateTo(qDateTo, qhkDateTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qFields, qhkFields, _ := qs.GetOK("fields")
	if err := o.bindFields(qFields, qhkFields, route.Formats); err != nil {
		res = append(res, err)
	}

	qUpdatedSince, qhkUpdatedSince, _ := qs.GetOK("updated_since")
	if err := o.bindUpdatedSince(qUpdatedSince, qhkUpdatedSince, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserID, qhkUserID, _ := qs.GetOK("user_id")
	if err := o.bindUserID(qUserID, qhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *GetAdsStatsParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-RequestID", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-RequestID", "header", raw); err != nil {
		return err
	}
	o.XRequestID = raw

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

// validateXRequestID carries on validations for parameter XRequestID
func (o *GetAdsStatsParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.MinLength("X-RequestID", "header", o.XRequestID, 30); err != nil {
		return err
	}

	return nil
}

// bindAccountID binds and validates parameter AccountID from path.
func (o *GetAdsStatsParams) bindAccountID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("account_id", "path", "int64", raw)
	}
	o.AccountID = value

	return nil
}

// bindAdIds binds and validates array parameter AdIds from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetAdsStatsParams) bindAdIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvAdIds string
	if len(rawData) > 0 {
		qvAdIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	adIdsIC := swag.SplitByFormat(qvAdIds, "")
	if len(adIdsIC) == 0 {
		return nil
	}

	var adIdsIR []int64
	for i, adIdsIV := range adIdsIC {
		adIdsI, err := swag.ConvertInt64(adIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ad_ids", i), "query", "int64", adIdsI)
		}

		adIdsIR = append(adIdsIR, adIdsI)
	}

	o.AdIds = adIdsIR

	return nil
}

// bindClientID binds and validates parameter ClientID from query.
func (o *GetAdsStatsParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("client_id", "query", "int64", raw)
	}
	o.ClientID = &value

	return nil
}

// bindDateFrom binds and validates parameter DateFrom from query.
func (o *GetAdsStatsParams) bindDateFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("date_from", "query", "int64", raw)
	}
	o.DateFrom = &value

	return nil
}

// bindDateTo binds and validates parameter DateTo from query.
func (o *GetAdsStatsParams) bindDateTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("date_to", "query", "int64", raw)
	}
	o.DateTo = &value

	return nil
}

// bindFields binds and validates array parameter Fields from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetAdsStatsParams) bindFields(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvFields string
	if len(rawData) > 0 {
		qvFields = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	fieldsIC := swag.SplitByFormat(qvFields, "")
	if len(fieldsIC) == 0 {
		return nil
	}

	var fieldsIR []string
	for _, fieldsIV := range fieldsIC {
		fieldsI := fieldsIV

		fieldsIR = append(fieldsIR, fieldsI)
	}

	o.Fields = fieldsIR

	return nil
}

// bindUpdatedSince binds and validates parameter UpdatedSince from query.
func (o *GetAdsStatsParams) bindUpdatedSince(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("updated_since", "query", "int64", raw)
	}
	o.UpdatedSince = &value

	return nil
}

// bindUserID binds and validates parameter UserID from query.
func (o *GetAdsStatsParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("user_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("user_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("user_id", "query", "int64", raw)
	}
	o.UserID = value

	return nil
}
