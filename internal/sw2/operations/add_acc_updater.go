// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/grbit/swagger-example/pkg/sw2/model"

	"github.com/go-openapi/runtime/middleware"
)

// AddAccUpdaterHandlerFunc turns a function with the right signature into a add acc updater handler
type AddAccUpdaterHandlerFunc func(AddAccUpdaterParams, *model.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AddAccUpdaterHandlerFunc) Handle(params AddAccUpdaterParams, principal *model.Principal) middleware.Responder {
	return fn(params, principal)
}

// AddAccUpdaterHandler interface for that can handle valid add acc updater params
type AddAccUpdaterHandler interface {
	Handle(AddAccUpdaterParams, *model.Principal) middleware.Responder
}

// NewAddAccUpdater creates a new http.Handler for the add acc updater operation
func NewAddAccUpdater(ctx *middleware.Context, handler AddAccUpdaterHandler) *AddAccUpdater {
	return &AddAccUpdater{Context: ctx, Handler: handler}
}

/*
	AddAccUpdater swagger:route POST / addAccUpdater

Starts loading account ad and campaign statistic or raise account loading task in line

	Response for new account is 201 CREATED
	Response for raising in line is 200 OK
*/
type AddAccUpdater struct {
	Context *middleware.Context
	Handler AddAccUpdaterHandler
}

func (o *AddAccUpdater) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddAccUpdaterParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *model.Principal
	if uprinc != nil {
		principal = uprinc.(*model.Principal) // this is really a model.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
